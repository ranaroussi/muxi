# Task ID: 17
# Title: Implement Centralized MCP Service Architecture
# Status: done
# Dependencies: None
# Priority: high
# Description: Design and implement a singleton MCPService class to centralize all MCP server communications, with supporting components for tool parsing, thread safety, and configurable timeouts.
# Details:
Create a comprehensive centralized architecture for MCP service communication with the following components:

1. **MCPService Singleton Class**:
   - Implement a singleton pattern for the MCPService class
   - Design methods to handle all MCP server connections
   - Include connection pooling to optimize performance
   - Implement retry logic for failed connections

2. **ToolParser Component**:
   - Create a dedicated parser to handle various tool call formats in LLM responses
   - Support JSON, XML, and plain text formats
   - Implement error handling for malformed tool calls
   - Design an extensible architecture to easily add new tool formats

3. **Agent Class Updates**:
   - Refactor the Agent class to use the centralized MCPService
   - Remove any direct MCP server connection code
   - Ensure backward compatibility with existing agent implementations

4. **Thread-Safe Implementation**:
   - Implement locks for tool invocation to ensure thread safety
   - Use ReentrantLock or similar mechanism for critical sections
   - Add deadlock detection and prevention mechanisms

5. **Configurable Timeouts**:
   - Add timeout configuration at orchestrator level (global default)
   - Implement agent-level timeout overrides
   - Support per-request timeout specifications
   - Create a timeout hierarchy where more specific settings override general ones

6. **Configuration Management**:
   - Design a configuration system for the MCPService
   - Support both file-based and programmatic configuration
   - Include environment variable overrides for deployment flexibility

# Test Strategy:
Implement a comprehensive testing strategy with the following components:

1. **Unit Tests**:
   - Test MCPService singleton behavior (getInstance method, etc.)
   - Verify ToolParser correctly handles various input formats
   - Test timeout configuration at all levels
   - Validate thread safety with concurrent access tests

2. **Integration Tests**:
   - Create mock MCP server to test full request/response cycle
   - Verify Agent class correctly uses the MCPService
   - Test error handling and retry logic with simulated failures
   - Validate timeout behavior with deliberately slow responses

3. **Load Testing**:
   - Test system under high concurrency (50+ simultaneous requests)
   - Measure performance metrics before and after implementation
   - Verify connection pooling works as expected under load

4. **Edge Cases**:
   - Test behavior when MCP server is unreachable
   - Verify correct handling of malformed responses
   - Test timeout edge cases (exactly at timeout boundary)
   - Validate behavior during partial system failures

5. **Regression Testing**:
   - Ensure existing agent functionality works with new architecture
   - Verify no performance degradation in common operations
   - Test backward compatibility with legacy components
