{
  "Agent initialization": {
    "prefix": "aiagent",
    "body": [
      "from src.core.orchestrator import Orchestrator",
      "from src.models.openai import OpenAIModel",
      "from src.memory.buffer import BufferMemory",
      "from src.memory.long_term import LongTermMemory",
      "",
      "# Create an orchestrator to manage agents",
      "orchestrator = Orchestrator()",
      "",
      "# Create an agent with memory",
      "orchestrator.create_agent(",
      "    agent_id=\"${1:assistant}\",",
      "    model=OpenAIModel(model=\"${2:gpt-4o}\"),",
      "    buffer_memory=BufferMemory(),",
      "    long_term_memory=LongTermMemory(),",
      "    system_message=\"${3:You are a helpful AI assistant.}\"",
      ")",
      "",
      "# Chat with the agent",
      "response = orchestrator.chat(\"${1:assistant}\", \"${4:Hello, can you help me?}\")",
      "print(response)"
    ],
    "description": "Initialize an AI agent with the framework"
  },
  "Custom Tool Creation": {
    "prefix": "aitool",
    "body": [
      "from src.tools.base import BaseTool",
      "from typing import Any, Dict",
      "",
      "class ${1:Custom}Tool(BaseTool):",
      "    \"\"\"${2:A custom tool for the AI Agent Framework.}\"\"\"",
      "",
      "    name = \"${3:custom_tool}\"",
      "    description = \"${4:This tool performs a custom operation.}\"",
      "",
      "    def execute(self, **kwargs: Any) -> Dict[str, Any]:",
      "        \"\"\"",
      "        Execute the custom tool functionality.",
      "",
      "        Args:",
      "            **kwargs: Arguments passed to the tool.",
      "",
      "        Returns:",
      "            Dict[str, Any]: The result of the tool execution.",
      "        \"\"\"",
      "        try:",
      "            # Implement custom functionality here",
      "            ${5:result = \"Custom tool executed successfully\"}",
      "            ",
      "            return {",
      "                \"success\": True,",
      "                \"result\": result",
      "            }",
      "        except Exception as e:",
      "            return {",
      "                \"success\": False,",
      "                \"error\": str(e)",
      "            }"
    ],
    "description": "Create a custom tool for the AI Agent Framework"
  },
  "WebSocket Handler": {
    "prefix": "aiws",
    "body": [
      "import json",
      "from typing import Dict, Any",
      "import websockets",
      "",
      "async def handle_websocket_messages():",
      "    \"\"\"Handle WebSocket messages from the AI Agent Framework.\"\"\"",
      "    uri = \"ws://localhost:${1:5050}/ws\"",
      "    async with websockets.connect(uri) as websocket:",
      "        # Subscribe to an agent",
      "        await websocket.send(json.dumps({",
      "            \"type\": \"subscribe\",",
      "            \"agent_id\": \"${2:agent}\"",
      "        }))",
      "        ",
      "        # Send a message",
      "        await websocket.send(json.dumps({",
      "            \"type\": \"chat\",",
      "            \"message\": \"${3:Hello, what can you help me with today?}\"",
      "        }))",
      "        ",
      "        # Receive messages",
      "        while True:",
      "            response = await websocket.recv()",
      "            data = json.loads(response)",
      "            ",
      "            # Handle different message types",
      "            if data.get(\"type\") == \"message\":",
      "                print(f\"Agent: {data.get('content')}\")",
      "            elif data.get(\"type\") == \"error\":",
      "                print(f\"Error: {data.get('message')}\")",
      "            elif data.get(\"type\") == \"tool_start\":",
      "                print(f\"Tool execution started: {data.get('tool')}\")",
      "            elif data.get(\"type\") == \"tool_end\":",
      "                print(f\"Tool execution completed: {data.get('result')}\")"
    ],
    "description": "Create a WebSocket handler for the AI Agent Framework"
  },
  "API Test": {
    "prefix": "aiapitest",
    "body": [
      "import unittest",
      "from unittest.mock import patch, MagicMock",
      "from fastapi.testclient import TestClient",
      "",
      "from src.api.app import create_app",
      "",
      "class Test${1:Feature}(unittest.TestCase):",
      "    \"\"\"Test the ${2:specific} API endpoint.\"\"\"",
      "",
      "    def setUp(self):",
      "        \"\"\"Set up the test client.\"\"\"",
      "        self.app = create_app()",
      "        self.client = TestClient(self.app)",
      "",
      "    def test_${3:endpoint}(self):",
      "        \"\"\"Test that the ${4:/endpoint} works correctly.\"\"\"",
      "        # Make the request",
      "        response = self.client.${5:get}(\"${6:/endpoint}\")",
      "        ",
      "        # Check the response",
      "        self.assertEqual(response.status_code, ${7:200})",
      "        ${8:data = response.json()}",
      "        ${9:self.assertEqual(data, {\"status\": \"success\"})}",
      "",
      "if __name__ == '__main__':",
      "    unittest.main()"
    ],
    "description": "Create a test for an API endpoint"
  }
}
