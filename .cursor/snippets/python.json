{
  "Agent initialization": {
    "prefix": "aiagent",
    "body": [
      "from src.core.orchestrator import Orchestrator",
      "from src.models.openai import OpenAIModel",
      "from src.memory.buffer import BufferMemory",
      "from src.memory.long_term import LongTermMemory",
      "",
      "# Create an orchestrator to manage agents",
      "orchestrator = Orchestrator()",
      "",
      "# Create an agent with memory",
      "orchestrator.create_agent(",
      "    agent_id=\"${1:assistant}\",",
      "    model=OpenAIModel(model=\"${2:gpt-4o}\"),",
      "    buffer_memory=BufferMemory(),",
      "    long_term_memory=LongTermMemory(),",
      "    system_message=\"${3:You are a helpful AI assistant.}\"",
      ")",
      "",
      "# Chat with the agent",
      "response = orchestrator.chat(\"${1:assistant}\", \"${4:Hello, can you help me?}\")",
      "print(response)"
    ],
    "description": "Initialize an AI agent"
  },
  "Custom Tool Creation": {
    "prefix": "aitool",
    "body": [
      "from src.tools.base import BaseTool",
      "from typing import Any, Dict",
      "",
      "class ${1:Custom}Tool(BaseTool):",
      "    \"\"\"${2:A custom tool for the MUXI Framework.}\"\"\"",
      "",
      "    name = \"${3:custom_tool}\"",
      "    description = \"${4:This tool performs a custom operation.}\"",
      "",
      "    def execute(self, **kwargs: Any) -> Dict[str, Any]:",
      "        \"\"\"",
      "        Execute the custom tool functionality.",
      "",
      "        Args:",
      "            **kwargs: Arguments passed to the tool.",
      "",
      "        Returns:",
      "            Dict[str, Any]: The result of the tool execution.",
      "        \"\"\"",
      "        try:",
      "            # Implement custom functionality here",
      "            ${5:result = \"Custom tool executed successfully\"}",
      "            ",
      "            return {",
      "                \"success\": True,",
      "                \"result\": result",
      "            }",
      "        except Exception as e:",
      "            return {",
      "                \"success\": False,",
      "                \"error\": str(e)",
      "            }"
    ],
    "description": "Create a custom tool for the MUXI Framework"
  },
  "WebSocket Handler": {
    "prefix": "aiws",
    "body": [
      "import json",
      "from typing import Dict, Any",
      "import websockets",
      "",
      "async def handle_websocket_messages():",
      "    \"\"\"Handle WebSocket messages from the MUXI Framework.\"\"\"",
      "    uri = \"ws://localhost:${1:5050}/ws\"",
      "    async with websockets.connect(uri) as websocket:",
      "        # Subscribe to an agent",
      "        await websocket.send(json.dumps({",
      "            \"type\": \"subscribe\",",
      "            \"agent_id\": \"${2:agent}\"",
      "        }))",
      "        ",
      "        # Send a message",
      "        await websocket.send(json.dumps({",
      "            \"type\": \"chat\",",
      "            \"message\": \"${3:Hello, what can you help me with today?}\"",
      "        }))",
      "        ",
      "        # Receive messages",
      "        while True:",
      "            response = await websocket.recv()",
      "            data = json.loads(response)",
      "            ",
      "            # Handle different message types",
      "            if data.get(\"type\") == \"message\":",
      "                print(f\"Agent: {data.get('content')}\")",
      "            elif data.get(\"type\") == \"error\":",
      "                print(f\"Error: {data.get('message')}\")",
      "            elif data.get(\"type\") == \"tool_start\":",
      "                print(f\"Tool execution started: {data.get('tool')}\")",
      "            elif data.get(\"type\") == \"tool_end\":",
      "                print(f\"Tool execution completed: {data.get('result')}\")"
    ],
    "description": "Create a WebSocket handler for the MUXI Framework"
  },
  "API Test": {
    "prefix": "aiapitest",
    "body": [
      "import unittest",
      "from unittest.mock import patch, MagicMock",
      "from fastapi.testclient import TestClient",
      "",
      "from src.api.app import create_app",
      "",
      "class Test${1:Feature}(unittest.TestCase):",
      "    \"\"\"Test the ${2:specific} API endpoint.\"\"\"",
      "",
      "    def setUp(self):",
      "        \"\"\"Set up the test client.\"\"\"",
      "        self.app = create_app()",
      "        self.client = TestClient(self.app)",
      "",
      "    def test_${3:endpoint}(self):",
      "        \"\"\"Test that the ${4:/endpoint} works correctly.\"\"\"",
      "        # Make the request",
      "        response = self.client.${5:get}(\"${6:/endpoint}\")",
      "        ",
      "        # Check the response",
      "        self.assertEqual(response.status_code, ${7:200})",
      "        ${8:data = response.json()}",
      "        ${9:self.assertEqual(data, {\"status\": \"success\"})}",
      "",
      "if __name__ == '__main__':",
      "    unittest.main()"
    ],
    "description": "Create a test for an API endpoint"
  },
  "Basic MUXI Application": {
    "prefix": "muxi-app",
    "body": [
      "from muxi.core.orchestrator import Orchestrator",
      "from muxi.core.models.openai import OpenAIModel",
      "from muxi.core.memory.buffer import BufferMemory",
      "from muxi.core.memory.long_term import LongTermMemory",
      "",
      "# Initialize the orchestrator",
      "orchestrator = Orchestrator()",
      "",
      "# Create a model",
      "model = OpenAIModel(",
      "    api_key=\"${1:your_api_key}\",",
      "    model=\"${2:gpt-4}\",",
      "    temperature=${3:0.7}",
      ")",
      "",
      "# Create memory systems",
      "buffer = BufferMemory()",
      "long_term = LongTermMemory()",
      "",
      "# Create an agent",
      "agent = orchestrator.add_agent(",
      "    name=\"${4:Assistant}\",",
      "    model=model,",
      "    buffer_memory=buffer,",
      "    long_term_memory=long_term",
      ")",
      "",
      "# Example interaction",
      "response = agent.generate(\"${5:Hello, how can you help me today?}\")"
    ],
    "description": "Creates a basic MUXI application with an orchestrator, agent, model, and memory systems"
  },
  "MUXI Tool Definition": {
    "prefix": "muxi-tool",
    "body": [
      "from muxi.core.tools.base import BaseTool",
      "from typing import Dict, Any, Optional",
      "",
      "class ${1:MyTool}(BaseTool):",
      "    \"\"\"",
      "    ${2:Description of what the tool does}",
      "    \"\"\"",
      "    name = \"${3:tool_name}\"",
      "    description = \"${4:A detailed description of the tool's functionality}\"",
      "",
      "    def __init__(self, ${5:param1: str = \"\", param2: Optional[int] = None}):",
      "        super().__init__()",
      "        self.${6:param1} = ${7:param1}",
      "        self.${8:param2} = ${9:param2}",
      "",
      "    def _execute(self, inputs: Dict[str, Any]) -> Dict[str, Any]:",
      "        \"\"\"",
      "        Execute the tool with the given inputs.",
      "        ",
      "        Args:",
      "            inputs: Dictionary containing the inputs for the tool",
      "                - ${10:input_name}: ${11:Description of the input}",
      "        ",
      "        Returns:",
      "            Dictionary containing the tool's outputs",
      "        \"\"\"",
      "        # Get inputs",
      "        ${12:input_var} = inputs.get(\"${13:input_name}\")",
      "        ",
      "        # Tool logic",
      "        ${14:result} = ${15:# Implementation of the tool's functionality}",
      "        ",
      "        # Return results",
      "        return {",
      "            \"${16:output_name}\": ${17:result}",
      "        }"
    ],
    "description": "Creates a template for a new MUXI tool"
  },
  "MUXI API Server": {
    "prefix": "muxi-api",
    "body": [
      "from muxi.core.api.app import create_app",
      "import uvicorn",
      "",
      "def main():",
      "    # Create and configure the FastAPI app",
      "    app = create_app()",
      "    ",
      "    # Start the server",
      "    uvicorn.run(",
      "        app,",
      "        host=\"${1:0.0.0.0}\",",
      "        port=${2:5000},",
      "        log_level=\"${3:info}\"",
      "    )",
      "",
      "if __name__ == \"__main__\":",
      "    main()"
    ],
    "description": "Creates a basic MUXI API server"
  }
}
