---
description:
globs:
alwaysApply: false
---
# Handling Anonymous Users in Memory Operations

In the MUXI framework, user_id=0 represents an anonymous or system user. For privacy and data organization reasons, memory operations should be skipped for these users.

## Key Principles

1. **Skip Memory Operations**: All memory storage and retrieval operations should check for `user_id == 0` and skip the operation if true.

2. **Return Empty Results**: Memory retrieval operations should return empty results (empty lists, dictionaries, etc.) when `user_id == 0`.

3. **Skip Automatic Extraction**: Information extraction should not be performed for anonymous users.

4. **Early Returns**: Check for anonymous users early in methods to avoid unnecessary processing.

## Implementation Pattern

```python
def memory_operation(self, user_id: int, *args, **kwargs):
    # Skip operations for anonymous users
    if user_id == 0:
        return []  # or {}, None, etc. depending on the expected return type

    # Continue with normal operation
    ...
```

## Anonymous Users in Orchestrator

The Orchestrator centralizes user ID handling for memory operations:

```python
async def add_to_long_term_memory(self, content, metadata, agent_id, user_id):
    # Skip for anonymous users
    if not self.long_term_memory or user_id == 0:
        return

    # Add agent_id and user_id to metadata
    full_metadata = {
        "agent_id": agent_id,
        "user_id": user_id,
        **metadata
    }

    await self.long_term_memory.add(content, full_metadata)
```

## Anonymous Users in Extraction

Extraction processes respect the anonymous user principle:

```python
async def handle_user_information_extraction(self, user_message, agent_response, user_id, agent_id, extraction_model=None):
    # Skip extraction for anonymous users
    if user_id == 0:
        return

    # Continue with extraction process
    ...
```

## Context Memory and Anonymous Users

Context memory operations follow the same pattern:

```python
async def get_user_context_memory(self, user_id):
    if not self.user_context_memory or user_id == 0:
        return {}

    return await self.user_context_memory.get(user_id)
```

## Testing Anonymous User Handling

Tests should verify that operations correctly handle anonymous users:

```python
@async_test
async def test_anonymous_user_skipped(self):
    # Setup a test with user_id=0
    user_message = "Hi, I'm anonymous"
    agent_response = "Hello there"

    # Execute the operation
    await self.extractor.process_conversation_turn(
        user_message=user_message,
        agent_response=agent_response,
        user_id=0,  # Anonymous user ID
        message_count=1
    )

    # Verify that no actions were taken
    self.mock_model.generate.assert_not_called()
    self.mock_orchestrator.add_user_context_memory.assert_not_called()
```

This ensures consistent handling of anonymous users throughout the codebase, protecting privacy and simplifying implementation.

## Return Values for Anonymous Users

| Operation Type | Return Value | Example |
|---------------|--------------|---------|
| Search operations | Empty list | `[]` |
| Context retrieval | Empty dict | `{}` |
| Add operations | Zero or dummy ID | `0` |
| Delete operations | Success indicator | `True` |
| Modify operations | No-op (void) | N/A |

## Affected Components

- **Memobase**: All memory storage/retrieval methods
- **MemoryExtractor**: Conversation processing methods
- **Agent**: Message processing methods that trigger extraction
- **Orchestrator**: Memory-related utility methods

## Component-Specific Guidelines

### Memobase

- Check user_id at the beginning of each method
- Return appropriate empty values for anonymous users
- Don't attempt to create or access collections for user_id=0

### MemoryExtractor

- Skip extraction entirely for anonymous users
- Check user_id before starting extraction process
- Return early from process_conversation_turn

### Agent

- Don't increment message count for anonymous users
- Skip extraction calls for anonymous users
- Don't attempt to enhance messages with context for anonymous users

### Orchestrator

- Skip memory operations for anonymous users in convenience methods
- Don't initialize extractor for single-user mode
- Add checks in extract_user_information method

## When to Apply

Apply these checks in:

1. Methods that store data in memory
2. Methods that retrieve data from memory
3. Methods that process user data for extraction
4. Methods that manage user-specific context

## Memory Management Methods

Key methods that should include anonymous user checks:

```
Memobase:
- add()
- search()
- delete()
- clear_user_memory()
- get_user_memories()
- add_user_context_memory()
- get_user_context_memory()
- import_user_context_memory()
- clear_user_context_memory()
- update_user_context_memory()

MemoryExtractor:
- process_conversation_turn()
- purge_user_data()

Agent:
- process_message()
- _enhance_with_context_memory()

Orchestrator:
- add_to_long_term_memory()
- search_memory()
- clear_memory()
- extract_user_information()
- get_user_context_memory()
- add_user_context_memory()
```

## Testing

When testing memory operations:
- Include test cases with user_id=0
- Verify that no data is stored/retrieved for anonymous users
- Confirm that appropriate empty results are returned
- Check that extraction is skipped for anonymous users

## Security and Privacy Implications

- Prevents accidental storage of anonymous user data
- Maintains strict separation between identified and anonymous interactions
- Aligns with privacy best practices by minimizing data collection
- Reduces the risk of data leakage across users
